#!/usr/bin/env python
#
# Copyright (C) 2011 Network Security Services, LLC
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# carver.py
# David Windsor <dwindsor@networksecurityservicesllc.com>
#  
# Usage: carver.py [-t <type>] <file>
#

import os
import sys
# Compute absolute path for import purposes
path = os.path.dirname(sys.argv[0])
abspath = os.path.abspath(path)
sys.path.append(abspath + "/../lib")

import carver_lib
import argparse
import plugin
import string
from evt_plugin import EvtPlugin

parser = argparse.ArgumentParser(description="Find forensics data.")
parser.add_argument("files", metavar="files", nargs="*", \
    help="files to be searched")
parser.add_argument("-t", "--type", action="append", \
    help="type of data to be carved")
parser.add_argument("--list-types", action="store_true", \
    help="list supported data types")
parser.add_argument("-v", "--verbose", action="store_true", \
    help="verbose output")
parser.add_argument("-V", "--version", action="version", \
    version="%(prog)s " + carver_lib.version, \
    help="print version information")

# EVT arguments
parser.add_argument("-s", "--sort-record-num", \
    action="store_true", help="sort records by record number")
parser.add_argument("-g", "--sort-time-generated", \
    action="store_true", help="sort records by time generated")

args = parser.parse_args()

if len(sys.argv) == 1:
    parser.print_help()
    exit()

# List supported types
if args.list_types:
    types = carver_lib.getSupportedTypes()
    print types
    exit()

if len(args.files) == 0:
    parser.print_help()
    exit()

for f in args.files:
    if (args.verbose):
        c1 = len("Searching:")
        print string.ljust("Searching:", c1),
        print os.path.abspath(f)
        print string.ljust("Plugins:", c1),
        for t in args.type:
            print t,
        print "\n"

    for t in args.type:
        plugin = carver_lib.getPlugin(t)
        if plugin == None:
            print "Unsupported plugin: %s" % args.type
            exit()
       
        (headers, records) = plugin.searchFile(f, verbose=args.verbose)
        sortedRecords = records

        # Sort records by record number
        if (args.sort_record_num):
            sortedRecords = \
                plugin.sortByRecordNum(records, args.verbose)

        # Sort records by time generated
        if (args.sort_time_generated):
            sortedRecords = \
                plugin.sortByTimeGenerated(records, args.verbose)

        for r in sortedRecords:
            print
            r.printRecord()
